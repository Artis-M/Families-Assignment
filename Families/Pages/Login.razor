﻿
@page "/login"
@namespace LoginComponent
@using Families.Authentication
@inject IJSRuntime jsRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<AuthorizeView>
    <NotAuthorized>
        <form @onsubmit="PerformLogin">
                <div class="row login-row">
                    <div class="input-field col s3">
                        <input type="text" placeholder="" @bind-value="username"/>
                        <label for="username">Username</label>
                    </div>
                    <div class="input-field col s3">
                        <input type="password" placeholder="" @bind-value="password"/>
                        <label class="bold" for="password">Password</label>
                    </div>
                    <div class="col s6">
                        <button class="btn" type="submit">
                            Login
                        </button>
                        <span class="helper-text  red-text lighten-1">@errorMessage</span>
                    </div>
                </div>
            </form>
    </NotAuthorized>
             <Authorized>
                 <div class="s4">
                     <button class="waves-effect waves-light btn" @onclick="PerformLogout">
                         Log out
                     </button>
                 </div>
             </Authorized>
</AuthorizeView>

@code {
    private string username;
    private string password;
    private string errorMessage;
    public async Task PerformLogin() {
        errorMessage = "";
        try {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(username, password);
            username = "";
            password = "";
        } catch (Exception e) {
            errorMessage = e.Message;
        }
    }

    public async Task PerformLogout() {
        errorMessage = "";
        username = "";
        password = "";
        try {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/");
        } catch (Exception e) { }
    }

}
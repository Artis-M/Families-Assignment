@page "/AdultList"
@using Models
@using Families.Data
@inject IFamilyService FamilyService
@inject AuthenticationStateProvider AuthenticationStateProvider;
@attribute [Authorize]


        <div class="row">
                <div class="input-field col s5">
                    <input id="firstname" type="text" @oninput="@(((arg) => Filter(arg)))">
                    <label for="firstname">Filter by name:</label>
                </div>
            </div>

@if (!Adults.Any())
{
    <p>No Adults have been added.</p>
}
else
{
    foreach (var item in AdultsToShow)
    {
        <div class="col s6">
            <div class="card teal lighten-1">
                <div class="card-content white-text">
                    <span class="card-title">
                        <div class="row">
                            <div class="col s8">
                                <strong>@item.FirstName @item.LastName</strong>
                            </div>
                            <div class="col s2">
                                        <button class="btn waves-effect waves-light red lighten-1" @onclick="@((() => RemoveAdult(item)))">
                                                       Delete
                                                    </button>
                            </div>
                            <div class="col s2">
                                <img style="height: 100px;" class="circle responsive- right" src="@item.PhotoLink"/>
                                </div>
                        </div>
                        

                    </span>
                    <table>
                        <thead>
                        <tr>
                            <th>Job</th>
                            <th>Eye Colour</th>
                            <th>Hair Colour</th>
                            <th>Age</th>
                            <th>Weight (kg)</th>
                            <th>Height (cm)</th>
                            <th>Gender</th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr>
                            <td>@item.JobTitle</td>
                            <td>@item.EyeColor</td>
                            <td>@item.HairColor</td>
                            <td>@item.Age</td>
                            <td>@item.Weight</td>
                            <td>@item.Height</td>
                            <td>@item.Sex</td>
                        </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div> 
    }
}

@code {
    IList<Adult> Adults;
    IList<Adult> AdultsToShow;

    protected override void OnInitialized()
    {
        getAdults();
        AdultsToShow = Adults;
    }

    private void getAdults()
    {
        Adults = FamilyService.getAdults();
    }

    private void Filter(ChangeEventArgs args)
    {
        string filterByName = null;
        try
        {
            filterByName = args.Value.ToString();
        }
        catch (Exception e)
        {
        }
        if (filterByName != null)
        {
            AdultsToShow = new List<Adult>();
            foreach (var item in Adults)
            {
                string firstAndLast = $"{item.FirstName} {item.LastName}";
                if (firstAndLast.Contains(filterByName))
                {
                    AdultsToShow.Add(item);
                }
            }
        }
        else
        {
            AdultsToShow = Adults;
        }
    }

    private void RemoveAdult(Adult adult)
    {
        FamilyService.removeAdult(adult);
        getAdults();
    }
}